15435
((3) 0 () 4 ((q lib "deinprogramm/sdp/advanced.rkt") (q lib "deinprogramm/sdp/beginner.rkt") (q lib "deinprogramm/sdp/private/primitives.rkt") (q lib "deinprogramm/sdp/deflam.rkt")) () (h ! (equal) ((c def c (c (? . 1) q string>=?)) q (5251 . 2)) ((c def c (c (? . 0) q angle)) q (11313 . 2)) ((c form c (c (? . 0) q quote)) q (10490 . 2)) ((c def c (c (? . 1) q inexact?)) q (3370 . 2)) ((c form c (c (? . 2) q expect-member-of)) q (1971 . 2)) ((c def c (c (? . 0) q number?)) q (12588 . 2)) ((c def c (c (? . 0) q min)) q (12356 . 2)) ((c def c (c (? . 1) q >=)) q (2514 . 2)) ((c def c (c (? . 0) q first)) q (13844 . 2)) ((c def c (c (? . 2) q sin)) q (8379 . 2)) ((c def c (c (? . 2) q map)) q (10193 . 2)) ((c def c (c (? . 1) q boolean=?)) q (4622 . 2)) ((c form c (c (? . 2) q define-record)) q (26 . 8)) ((c def c (c (? . 2) q rational?)) q (8163 . 2)) ((c def c (c (? . 1) q odd?)) q (4002 . 2)) ((c def c (c (? . 0) q false?)) q (13435 . 2)) ((c def c (c (? . 0) q list-ref)) q (14047 . 2)) ((c def c (c (? . 2) q numerator)) q (7933 . 2)) ((c def c (c (? . 0) q numerator)) q (12628 . 2)) ((c def c (c (? . 0) q symbol?)) q (14970 . 2)) ((c form c (c (? . 2) q or)) q (882 . 2)) ((c def c (c (? . 2) q boolean=?)) q (8600 . 2)) ((c def c (c (? . 1) q not)) q (4801 . 2)) ((c def c (c (? . 2) q string<=?)) q (9692 . 2)) ((c def c (c (? . 1) q string->number)) q (4478 . 2)) ((c def c (c (? . 1) q boolean?)) q (4677 . 2)) ((c def c (c (? . 1) q +)) q (2136 . 2)) ((c def c (c (? . 0) q eq?)) q (15063 . 2)) ((c def c (c (? . 0) q real?)) q (12942 . 2)) ((c form c (c (? . 2) q ->)) q (1292 . 2)) ((c def c (c (? . 0) q filter)) q (13770 . 2)) ((c def c (c (? . 2) q min)) q (7661 . 2)) ((c def c (c (? . 2) q inexact->exact)) q (7299 . 2)) ((c form c (c (? . 2) q combined)) q (1370 . 2)) ((c def c (c (? . 2) q tan)) q (8521 . 2)) ((c def c (c (? . 1) q number->string)) q (3866 . 2)) ((c def c (c (? . 2) q number->string)) q (7844 . 2)) ((c def c (c (? . 2) q equal?)) q (8696 . 2)) ((c def c (c (? . 1) q rational?)) q (4185 . 2)) ((c def c (c (? . 2) q lcm)) q (7433 . 2)) ((c def c (c (? . 0) q exp)) q (11774 . 2)) ((c def c (c (? . 2) q atan)) q (6695 . 2)) ((c def c (c (? . 1) q exp)) q (3101 . 2)) ((c form c (c (? . 2) q expect-within)) q (1930 . 2)) ((c def c (c (? . 2) q exact?)) q (7037 . 2)) ((c def c (c (? . 1) q positive?)) q (4043 . 2)) ((c def c (c (? . 2) q acos)) q (6579 . 2)) ((c form c (c (? . 2) q any)) q (1173 . 2)) ((c def c (c (? . 2) q string-length)) q (9643 . 2)) ((c def c (c (? . 1) q number?)) q (3915 . 2)) ((c def c (c (? . 2) q *)) q (6057 . 2)) ((c form c (c (? . 2) q :)) q (929 . 2)) ((c def c (c (? . 1) q string-length)) q (5006 . 2)) ((c def c (c (? . 2) q modulo)) q (7706 . 2)) ((c def c (c (? . 1) q numerator)) q (3955 . 2)) ((c def c (c (? . 2) q reverse)) q (9460 . 2)) ((c def c (c (? . 0) q string>?)) q (14649 . 2)) ((c def c (c (? . 1) q ceiling)) q (2756 . 2)) ((c def c (c (? . 1) q natural?)) q (3780 . 2)) ((c def c (c (? . 2) q real-part)) q (8205 . 2)) ((c form c (c (? . 2) q signature)) q (905 . 2)) ((c def c (c (? . 0) q signature?)) q (15264 . 2)) ((c def c (c (? . 1) q true?)) q (4841 . 2)) ((c def c (c (? . 0) q rational?)) q (12858 . 2)) ((c def c (c (? . 0) q string-length)) q (14338 . 2)) ((c def c (c (? . 1) q imag-part)) q (3279 . 2)) ((c def c (c (? . 1) q floor)) q (3186 . 2)) ((c def c (c (? . 2) q string>=?)) q (9888 . 2)) ((c def c (c (? . 0) q -)) q (10866 . 2)) ((c form c (c (? . 2) q define)) q (0 . 2)) ((c def c (c (? . 1) q gcd)) q (3225 . 2)) ((c def c (c (? . 0) q natural?)) q (12453 . 2)) ((c def c (c (? . 2) q fold)) q (9192 . 2)) ((c def c (c (? . 2) q ceiling)) q (6734 . 2)) ((c def c (c (? . 2) q integer-from-to)) q (1006 . 4)) ((c def c (c (? . 0) q length)) q (13951 . 2)) ((c def c (c (? . 1) q false?)) q (4762 . 2)) ((c def c (c (? . 1) q equal?)) q (4718 . 2)) ((c def c (c (? . 2) q integer?)) q (7392 . 2)) ((c def c (c (? . 2) q quotient)) q (8066 . 2)) ((c def c (c (? . 0) q string?)) q (14714 . 2)) ((c form c (c (? . 0) q symbol)) q (10513 . 2)) ((c def c (c (? . 2) q expt)) q (7117 . 2)) ((c def c (c (? . 2) q cons?)) q (8974 . 2)) ((c def c (c (? . 2) q odd?)) q (7980 . 2)) ((c def c (c (? . 0) q list)) q (14000 . 2)) ((c def c (c (? . 2) q string>?)) q (9954 . 2)) ((c form c (c (? . 2) q expect-range)) q (2014 . 2)) ((c def c (c (? . 1) q log)) q (3509 . 2)) ((c def c (c (? . 1) q -)) q (2193 . 2)) ((c def c (c (? . 1) q string<=?)) q (5055 . 2)) ((c def c (c (? . 1) q angle)) q (2640 . 2)) ((c form c (c (? . 3) q lambda)) q (10638 . 2)) ((c def c (c (? . 2) q denominator)) q (6897 . 2)) ((c def c (c (? . 2) q exp)) q (7079 . 2)) ((c form c (c (? . 2) q string)) q (1159 . 2)) ((c def c (c (? . 0) q denominator)) q (11592 . 2)) ((c def c (c (? . 2) q positive?)) q (8021 . 2)) ((c def c (c (? . 1) q complex?)) q (2797 . 2)) ((c form c (c (? . 2) q check-member-of)) q (1472 . 2)) ((c form c (c (? . 2) q empty-list)) q (5702 . 2)) ((c def c (c (? . 2) q negative?)) q (7799 . 2)) ((c def c (c (? . 0) q cons?)) q (13669 . 2)) ((c def c (c (? . 1) q string-append)) q (4945 . 2)) ((c def c (c (? . 2) q empty)) q (9012 . 2)) ((c def c (c (? . 1) q zero?)) q (4581 . 2)) ((c def c (c (? . 2) q round)) q (8340 . 2)) ((c def c (c (? . 0) q boolean=?)) q (13295 . 2)) ((c def c (c (? . 1) q string=?)) q (5186 . 2)) ((c def c (c (? . 0) q ceiling)) q (11429 . 2)) ((c def c (c (? . 0) q magnitude)) q (12220 . 2)) ((c def c (c (? . 2) q magnitude)) q (7525 . 2)) ((c def c (c (? . 2) q max)) q (7616 . 2)) ((c def c (c (? . 1) q negative?)) q (3821 . 2)) ((c def c (c (? . 2) q sqrt)) q (8417 . 2)) ((c def c (c (? . 2) q true?)) q (8819 . 2)) ((c form c (c (? . 2) q Î»)) q (603 . 2)) ((c def c (c (? . 2) q strings-list->string)) q (10059 . 2)) ((c def c (c (? . 0) q floor)) q (11859 . 2)) ((c def c (c (? . 0) q modulo)) q (12401 . 2)) ((c form c (c (? . 2) q boolean)) q (1119 . 2)) ((c def c (c (? . 0) q +)) q (10809 . 2)) ((c def c (c (? . 2) q -)) q (6171 . 2)) ((c form c (c (? . 2) q rational)) q (975 . 2)) ((c def c (c (? . 1) q write-newline)) q (5607 . 2)) ((c def c (c (? . 2) q even?)) q (6946 . 2)) ((c def c (c (? . 2) q exact->inexact)) q (6988 . 2)) ((c def c (c (? . 0) q expt)) q (11812 . 2)) ((c def c (c (? . 1) q <)) q (2299 . 2)) ((c def c (c (? . 0) q asin)) q (11351 . 2)) ((c def c (c (? . 0) q string<?)) q (14453 . 2)) ((c def c (c (? . 1) q sqrt)) q (4439 . 2)) ((c def c (c (? . 1) q write-string)) q (5651 . 2)) ((c form c (c (? . 2) q expect)) q (1902 . 2)) ((c def c (c (? . 1) q acos)) q (2601 . 2)) ((c def c (c (? . 0) q sin)) q (13074 . 2)) ((c def c (c (? . 0) q acos)) q (11274 . 2)) ((c def c (c (? . 2) q inexact?)) q (7348 . 2)) ((c def c (c (? . 1) q denominator)) q (2919 . 2)) ((c def c (c (? . 2) q zero?)) q (8559 . 2)) ((c def c (c (? . 0) q <=)) q (11024 . 2)) ((c def c (c (? . 0) q string>=?)) q (14583 . 2)) ((c def c (c (? . 0) q append)) q (13552 . 2)) ((c def c (c (? . 1) q round)) q (4362 . 2)) ((c def c (c (? . 0) q integer?)) q (12087 . 2)) ((c form c (c (? . 2) q true)) q (1134 . 2)) ((c def c (c (? . 2) q remainder)) q (8285 . 2)) ((c def c (c (? . 0) q boolean?)) q (13350 . 2)) ((c def c (c (? . 0) q make-polar)) q (12262 . 2)) ((c def c (c (? . 1) q string>?)) q (5317 . 2)) ((c def c (c (? . 1) q tan)) q (4543 . 2)) ((c def c (c (? . 2) q make-polar)) q (7567 . 2)) ((c def c (c (? . 2) q string->number)) q (8456 . 2)) ((c def c (c (? . 0) q true?)) q (13514 . 2)) ((c form c (c (? . 2) q and)) q (858 . 2)) ((c def c (c (? . 0) q <)) q (10972 . 2)) ((c def c (c (? . 0) q string->symbol)) q (14820 . 2)) ((c def c (c (? . 2) q gcd)) q (7203 . 2)) ((c def c (c (? . 0) q >)) q (11135 . 2)) ((c def c (c (? . 2) q cos)) q (6816 . 2)) ((c form c (c (? . 2) q check-property)) q (1623 . 2)) ((c def c (c (? . 2) q random)) q (8120 . 2)) ((c form c (c (? . 2) q check-error)) q (1590 . 2)) ((c def c (c (? . 1) q min)) q (3683 . 2)) ((c def c (c (? . 0) q string->strings-list)) q (14211 . 2)) ((c form c (c (? . 2) q list-of)) q (5720 . 2)) ((c def c (c (? . 1) q quotient)) q (4088 . 2)) ((c def c (c (? . 0) q abs)) q (11240 . 2)) ((c form c (c (? . 2) q check-range)) q (1551 . 2)) ((c def c (c (? . 2) q real?)) q (8247 . 2)) ((c def c (c (? . 0) q exact?)) q (11732 . 2)) ((c def c (c (? . 2) q string=?)) q (9823 . 2)) ((c def c (c (? . 0) q remainder)) q (12980 . 2)) ((c def c (c (? . 1) q string<?)) q (5121 . 2)) ((c def c (c (? . 1) q atan)) q (2717 . 2)) ((c def c (c (? . 0) q log)) q (12182 . 2)) ((c form c (c (? . 2) q predicate)) q (1217 . 2)) ((c def c (c (? . 2) q <=)) q (6329 . 2)) ((c def c (c (? . 0) q violation)) q (15307 . 2)) ((c def c (c (? . 1) q <=)) q (2351 . 2)) ((c def c (c (? . 2) q string-append)) q (9582 . 2)) ((c def c (c (? . 2) q <)) q (6277 . 2)) ((c def c (c (? . 0) q strings-list->string)) q (14754 . 2)) ((c def c (c (? . 1) q lcm)) q (3455 . 2)) ((c def c (c (? . 1) q exact->inexact)) q (3010 . 2)) ((c form c (c (? . 2) q define-singleton)) q (436 . 3)) ((c def c (c (? . 2) q current-seconds)) q (6854 . 2)) ((c def c (c (? . 1) q >)) q (2462 . 2)) ((c def c (c (? . 0) q not)) q (13474 . 2)) ((c def c (c (? . 2) q natural?)) q (7758 . 2)) ((c def c (c (? . 0) q even?)) q (11641 . 2)) ((c def c (c (? . 0) q fold)) q (13887 . 2)) ((c form c (c (? . 2) q check-satisfied)) q (1514 . 2)) ((c form c (c (? . 2) q lambda)) q (553 . 2)) ((c def c (c (? . 0) q zero?)) q (13254 . 2)) ((c form c (c (? . 2) q ==>)) q (2054 . 2)) ((c def c (c (? . 2) q for-each)) q (10125 . 2)) ((c def c (c (? . 2) q =)) q (6382 . 2)) ((c def c (c (? . 0) q /)) q (10915 . 2)) ((c def c (c (? . 0) q cons)) q (13612 . 2)) ((c def c (c (? . 0) q inexact->exact)) q (11994 . 2)) ((c def c (c (? . 0) q max)) q (12311 . 2)) ((c def c (c (? . 1) q real?)) q (4269 . 2)) ((c def c (c (? . 0) q real-part)) q (12900 . 2)) ((c def c (c (? . 1) q violation)) q (5559 . 2)) ((c form c (c (? . 2) q natural)) q (1104 . 2)) ((c def c (c (? . 0) q exact->inexact)) q (11683 . 2)) ((c def c (c (? . 0) q positive?)) q (12716 . 2)) ((c def c (c (? . 0) q equal?)) q (13391 . 2)) ((c def c (c (? . 0) q sqrt)) q (13112 . 2)) ((c def c (c (? . 1) q inexact->exact)) q (3321 . 2)) ((c def c (c (? . 0) q negative?)) q (12494 . 2)) ((c def c (c (? . 1) q abs)) q (2567 . 2)) ((c def c (c (? . 2) q string->strings-list)) q (9516 . 2)) ((c def c (c (? . 0) q string-append)) q (14277 . 2)) ((c form c (c (? . 0) q begin)) q (10720 . 2)) ((c def c (c (? . 2) q string?)) q (10019 . 2)) ((c form c (c (? . 2) q false)) q (1146 . 2)) ((c def c (c (? . 1) q =)) q (2404 . 2)) ((c form c (c (? . 2) q number)) q (949 . 2)) ((c def c (c (? . 1) q even?)) q (2968 . 2)) ((c def c (c (? . 0) q imag-part)) q (11952 . 2)) ((c def c (c (? . 2) q cons)) q (8917 . 2)) ((c def c (c (? . 0) q number->string)) q (12539 . 2)) ((c def c (c (? . 1) q random)) q (4142 . 2)) ((c form c (c (? . 2) q enum)) q (1242 . 2)) ((c def c (c (? . 0) q symbol->string)) q (14869 . 2)) ((c def c (c (? . 0) q random)) q (12815 . 2)) ((c def c (c (? . 0) q atan)) q (11390 . 2)) ((c def c (c (? . 0) q write-newline)) q (15355 . 2)) ((c def c (c (? . 2) q write-newline)) q (10378 . 2)) ((c form c (c (? . 2) q integer)) q (991 . 2)) ((c def c (c (? . 0) q lcm)) q (12128 . 2)) ((c def c (c (? . 2) q length)) q (9256 . 2)) ((c form c (c (? . 2) q cons-list-of)) q (5742 . 2)) ((c def c (c (? . 1) q expt)) q (3139 . 2)) ((c def c (c (? . 1) q real-part)) q (4227 . 2)) ((c def c (c (? . 0) q quotient)) q (12761 . 2)) ((c def c (c (? . 2) q append)) q (8857 . 2)) ((c def c (c (? . 2) q complex?)) q (6775 . 2)) ((c def c (c (? . 0) q *)) q (10752 . 2)) ((c def c (c (? . 0) q map)) q (15170 . 2)) ((c def c (c (? . 1) q exact?)) q (3059 . 2)) ((c def c (c (? . 0) q string=?)) q (14518 . 2)) ((c form c (c (? . 2) q match)) q (1653 . 10)) ((c def c (c (? . 2) q empty?)) q (9036 . 2)) ((c def c (c (? . 0) q gcd)) q (11898 . 2)) ((c def c (c (? . 1) q magnitude)) q (3547 . 2)) ((c def c (c (? . 1) q remainder)) q (4307 . 2)) ((c def c (c (? . 1) q cos)) q (2838 . 2)) ((c def c (c (? . 2) q asin)) q (6656 . 2)) ((c def c (c (? . 2) q floor)) q (7164 . 2)) ((c def c (c (? . 2) q abs)) q (6545 . 2)) ((c def c (c (? . 1) q signature?)) q (5516 . 2)) ((c def c (c (? . 2) q boolean?)) q (8655 . 2)) ((c def c (c (? . 0) q string<=?)) q (14387 . 2)) ((c form c (c (? . 2) q property)) q (1201 . 2)) ((c def c (c (? . 2) q angle)) q (6618 . 2)) ((c form c (c (? . 3) q define)) q (10612 . 2)) ((c def c (c (? . 1) q sin)) q (4401 . 2)) ((c def c (c (? . 2) q write-string)) q (10422 . 2)) ((c def c (c (? . 0) q string->number)) q (13151 . 2)) ((c def c (c (? . 0) q complex?)) q (11470 . 2)) ((c form c (c (? . 2) q let)) q (5769 . 2)) ((c def c (c (? . 2) q list-ref)) q (9352 . 2)) ((c def c (c (? . 0) q empty)) q (13707 . 2)) ((c def c (c (? . 0) q read)) q (15236 . 2)) ((c def c (c (? . 2) q /)) q (6220 . 2)) ((c def c (c (? . 1) q string->strings-list)) q (4879 . 2)) ((c def c (c (? . 0) q symbol=?)) q (14918 . 2)) ((c def c (c (? . 0) q >=)) q (11187 . 2)) ((c form c (c (? . 2) q else)) q (816 . 2)) ((c def c (c (? . 2) q first)) q (9149 . 2)) ((c def c (c (? . 0) q odd?)) q (12675 . 2)) ((c form c (c (? . 2) q cond)) q (659 . 2)) ((c def c (c (? . 1) q strings-list->string)) q (5422 . 2)) ((c def c (c (? . 0) q round)) q (13035 . 2)) ((c form c (c (? . 2) q letrec)) q (5807 . 2)) ((c form c (c (? . 2) q if)) q (828 . 2)) ((c def c (c (? . 2) q number?)) q (7893 . 2)) ((c def c (c (? . 0) q apply)) q (15010 . 2)) ((c def c (c (? . 2) q signature?)) q (10287 . 2)) ((c form c (c (? . 2) q let*)) q (5848 . 2)) ((c def c (c (? . 2) q >)) q (6440 . 2)) ((c form c (c (? . 2) q mixed)) q (1267 . 2)) ((c def c (c (? . 1) q read)) q (5488 . 2)) ((c def c (c (? . 1) q string?)) q (5382 . 2)) ((c def c (c (? . 2) q false?)) q (8740 . 2)) ((c def c (c (? . 0) q inexact?)) q (12043 . 2)) ((c def c (c (? . 1) q modulo)) q (3728 . 2)) ((c def c (c (? . 1) q integer?)) q (3414 . 2)) ((c form c (c (? . 2) q for-all)) q (1861 . 2)) ((c def c (c (? . 1) q *)) q (2079 . 2)) ((c def c (c (? . 0) q write-string)) q (15399 . 2)) ((c def c (c (? . 2) q violation)) q (10330 . 2)) ((c def c (c (? . 2) q read)) q (10259 . 2)) ((c def c (c (? . 2) q rest)) q (9407 . 2)) ((c def c (c (? . 2) q list)) q (9305 . 2)) ((c def c (c (? . 1) q make-polar)) q (3589 . 2)) ((c def c (c (? . 2) q filter)) q (9075 . 2)) ((c def c (c (? . 2) q not)) q (8779 . 2)) ((c def c (c (? . 2) q +)) q (6114 . 2)) ((c def c (c (? . 2) q string<?)) q (9758 . 2)) ((c def c (c (? . 1) q asin)) q (2678 . 2)) ((c form c (c (? . 2) q check-expect)) q (1398 . 2)) ((c def c (c (? . 1) q current-seconds)) q (2876 . 2)) ((c def c (c (? . 0) q current-seconds)) q (11549 . 2)) ((c form c (c (? . 3) q Î»)) q (10681 . 2)) ((c def c (c (? . 0) q empty?)) q (13731 . 2)) ((c def c (c (? . 1) q max)) q (3638 . 2)) ((c def c (c (? . 2) q >=)) q (6492 . 2)) ((c def c (c (? . 0) q tan)) q (13216 . 2)) ((c form c (c (? . 2) q real)) q (963 . 2)) ((c def c (c (? . 0) q reverse)) q (14155 . 2)) ((c def c (c (? . 2) q log)) q (7487 . 2)) ((c def c (c (? . 0) q rest)) q (14102 . 2)) ((c def c (c (? . 1) q /)) q (2242 . 2)) ((c def c (c (? . 0) q =)) q (11077 . 2)) ((c form c (c (? . 2) q check-within)) q (1432 . 2)) ((c def c (c (? . 2) q imag-part)) q (7257 . 2)) ((c def c (c (? . 0) q cos)) q (11511 . 2)) ((c def c (c (? . 0) q for-each)) q (15102 . 2))))
syntax
(defineÂ idÂ expr)
syntax
(define-recordÂ type
Â Â constructor
Â Â (selectorÂ signature)Â ...)
(define-recordÂ type
Â Â constructor
Â Â predicate?
Â Â (selectorÂ signature)Â ...)
syntax
(define-recordÂ (type-constructorÂ signature-parameterÂ ...)
Â Â Â constructor
Â Â Â (selectorÂ signature)Â ...)
(define-recordÂ (type-constructorÂ signature-parameterÂ ...)
Â Â Â constructor
Â Â Â predicate?
Â Â Â (selectorÂ signature)Â ...)
syntax
(define-singletonÂ signatureÂ name?)
(define-singletonÂ signatureÂ nameÂ predicate?)
syntax
(exprÂ exprÂ ...)
syntax
(lambdaÂ (idÂ ...)Â definitionÂ ...Â expr)
syntax
(Î»Â (idÂ ...)Â definitionÂ ...Â expr)
syntax
id
syntax
(condÂ (exprÂ definitionÂ ...Â expr)Â ...Â (exprÂ definitionÂ ...Â expr))
syntax
(condÂ (exprÂ definitionÂ ...Â expr)Â ...Â (elseÂ definitionÂ expr))
syntax
else
syntax
(ifÂ exprÂ exprÂ expr)
syntax
(andÂ exprÂ ...)
syntax
(orÂ exprÂ ...)
syntax
(signatureÂ sig)
syntax
(:Â idÂ sig)
syntax
number
syntax
real
syntax
rational
syntax
integer
procedure
(integer-from-toÂ lowÂ high)Â ->Â signature?
Â Â lowÂ :Â integer?
Â Â highÂ :Â integer?
syntax
natural
syntax
boolean
syntax
true
syntax
false
syntax
string
syntax
any
syntax
signature
syntax
property
syntax
(predicateÂ expr)
syntax
(enumÂ exprÂ ...)
syntax
(mixedÂ sigÂ ...)
syntax
->
syntax
(sigÂ ...Â ->Â sig)
syntax
%a
syntax
%b
syntax
%c
syntax
...
syntax
(combinedÂ sigÂ ...)
syntax
(check-expectÂ exprÂ expr)
syntax
(check-withinÂ exprÂ exprÂ expr)
syntax
(check-member-ofÂ exprÂ exprÂ ...)
syntax
(check-satisfiedÂ exprÂ pred)
syntax
(check-rangeÂ exprÂ exprÂ expr)
syntax
(check-errorÂ exprÂ expr)
syntax
(check-propertyÂ expr)
syntax
(matchÂ exprÂ (patternÂ definitionÂ ...Â expr)Â ...)
Â 
patternÂ =Â id
      Â Â |Â #t
      Â Â |Â #f
      Â Â |Â string
      Â Â |Â number
      Â Â |Â ...
      Â Â |Â (constructorÂ patternÂ ...)
syntax
(for-allÂ ((idÂ sig)Â ...)Â expr)
syntax
(expectÂ exprÂ expr)
syntax
(expect-withinÂ exprÂ exprÂ expr)
syntax
(expect-member-ofÂ exprÂ exprÂ ...)
syntax
(expect-rangeÂ exprÂ exprÂ expr)
syntax
(==>Â exprÂ expr)
function
*Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
+Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
-Â :Â (numberÂ numberÂ ...Â ->Â number)
function
/Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
<Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
<=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
=Â :Â (numberÂ numberÂ numberÂ ...Â ->Â boolean)
function
>Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
>=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
absÂ :Â (realÂ ->Â real)
function
acosÂ :Â (numberÂ ->Â number)
function
angleÂ :Â (numberÂ ->Â real)
function
asinÂ :Â (numberÂ ->Â number)
function
atanÂ :Â (numberÂ ->Â number)
function
ceilingÂ :Â (realÂ ->Â integer)
function
complex?Â :Â (anyÂ ->Â boolean)
function
cosÂ :Â (numberÂ ->Â number)
function
current-secondsÂ :Â (->Â natural)
function
denominatorÂ :Â (rationalÂ ->Â natural)
function
even?Â :Â (integerÂ ->Â boolean)
function
exact->inexactÂ :Â (numberÂ ->Â number)
function
exact?Â :Â (numberÂ ->Â boolean)
function
expÂ :Â (numberÂ ->Â number)
function
exptÂ :Â (numberÂ numberÂ ->Â number)
function
floorÂ :Â (realÂ ->Â integer)
function
gcdÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
imag-partÂ :Â (numberÂ ->Â real)
function
inexact->exactÂ :Â (numberÂ ->Â number)
function
inexact?Â :Â (numberÂ ->Â boolean)
function
integer?Â :Â (anyÂ ->Â boolean)
function
lcmÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
logÂ :Â (numberÂ ->Â number)
function
magnitudeÂ :Â (numberÂ ->Â real)
function
make-polarÂ :Â (realÂ realÂ ->Â number)
function
maxÂ :Â (realÂ realÂ ...Â ->Â real)
function
minÂ :Â (realÂ realÂ ...Â ->Â real)
function
moduloÂ :Â (integerÂ integerÂ ->Â integer)
function
natural?Â :Â (anyÂ ->Â boolean)
function
negative?Â :Â (numberÂ ->Â boolean)
function
number->stringÂ :Â (numberÂ ->Â string)
function
number?Â :Â (anyÂ ->Â boolean)
function
numeratorÂ :Â (rationalÂ ->Â integer)
function
odd?Â :Â (integerÂ ->Â boolean)
function
positive?Â :Â (numberÂ ->Â boolean)
function
quotientÂ :Â (integerÂ integerÂ ->Â integer)
function
randomÂ :Â (naturalÂ ->Â natural)
function
rational?Â :Â (anyÂ ->Â boolean)
function
real-partÂ :Â (numberÂ ->Â real)
function
real?Â :Â (anyÂ ->Â boolean)
function
remainderÂ :Â (integerÂ integerÂ ->Â integer)
function
roundÂ :Â (realÂ ->Â integer)
function
sinÂ :Â (numberÂ ->Â number)
function
sqrtÂ :Â (numberÂ ->Â number)
function
string->numberÂ :Â (stringÂ ->Â (mixedÂ numberÂ false))
function
tanÂ :Â (numberÂ ->Â number)
function
zero?Â :Â (numberÂ ->Â boolean)
function
boolean=?Â :Â (booleanÂ booleanÂ ->Â boolean)
function
boolean?Â :Â (anyÂ ->Â boolean)
function
equal?Â :Â (anyÂ anyÂ ->Â boolean)
function
false?Â :Â (anyÂ ->Â boolean)
function
notÂ :Â (booleanÂ ->Â boolean)
function
true?Â :Â (anyÂ ->Â boolean)
function
string->strings-listÂ :Â (stringÂ ->Â (list-ofÂ string))
function
string-appendÂ :Â (stringÂ stringÂ ...Â ->Â string)
function
string-lengthÂ :Â (stringÂ ->Â natural)
function
string<=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string<?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string?Â :Â (anyÂ ->Â boolean)
function
strings-list->stringÂ :Â ((list-ofÂ string)Â ->Â string)
function
readÂ :Â (->Â any)
function
signature?Â :Â (anyÂ ->Â boolean)
function
violationÂ :Â (stringÂ ->Â unspecific)
function
write-newlineÂ :Â (->Â unspecific)
function
write-stringÂ :Â (stringÂ ->Â unspecific)
syntax
empty-list
syntax
(list-ofÂ sig)
syntax
(cons-list-ofÂ sig)
syntax
(letÂ ((idÂ expr)Â ...)Â expr)
syntax
(letrecÂ ((idÂ expr)Â ...)Â expr)
syntax
(let*Â ((idÂ expr)Â ...)Â expr)
syntax
(matchÂ exprÂ (patternÂ definitionÂ ...Â expr)Â ...)
Â 
patternÂ =Â ...
      Â Â |Â empty
      Â Â |Â (consÂ patternÂ pattern)
      Â Â |Â (listÂ patternÂ ...)
function
*Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
+Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
-Â :Â (numberÂ numberÂ ...Â ->Â number)
function
/Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
<Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
<=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
=Â :Â (numberÂ numberÂ numberÂ ...Â ->Â boolean)
function
>Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
>=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
absÂ :Â (realÂ ->Â real)
function
acosÂ :Â (numberÂ ->Â number)
function
angleÂ :Â (numberÂ ->Â real)
function
asinÂ :Â (numberÂ ->Â number)
function
atanÂ :Â (numberÂ ->Â number)
function
ceilingÂ :Â (realÂ ->Â integer)
function
complex?Â :Â (anyÂ ->Â boolean)
function
cosÂ :Â (numberÂ ->Â number)
function
current-secondsÂ :Â (->Â natural)
function
denominatorÂ :Â (rationalÂ ->Â natural)
function
even?Â :Â (integerÂ ->Â boolean)
function
exact->inexactÂ :Â (numberÂ ->Â number)
function
exact?Â :Â (numberÂ ->Â boolean)
function
expÂ :Â (numberÂ ->Â number)
function
exptÂ :Â (numberÂ numberÂ ->Â number)
function
floorÂ :Â (realÂ ->Â integer)
function
gcdÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
imag-partÂ :Â (numberÂ ->Â real)
function
inexact->exactÂ :Â (numberÂ ->Â number)
function
inexact?Â :Â (numberÂ ->Â boolean)
function
integer?Â :Â (anyÂ ->Â boolean)
function
lcmÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
logÂ :Â (numberÂ ->Â number)
function
magnitudeÂ :Â (numberÂ ->Â real)
function
make-polarÂ :Â (realÂ realÂ ->Â number)
function
maxÂ :Â (realÂ realÂ ...Â ->Â real)
function
minÂ :Â (realÂ realÂ ...Â ->Â real)
function
moduloÂ :Â (integerÂ integerÂ ->Â integer)
function
natural?Â :Â (anyÂ ->Â boolean)
function
negative?Â :Â (numberÂ ->Â boolean)
function
number->stringÂ :Â (numberÂ ->Â string)
function
number?Â :Â (anyÂ ->Â boolean)
function
numeratorÂ :Â (rationalÂ ->Â integer)
function
odd?Â :Â (integerÂ ->Â boolean)
function
positive?Â :Â (numberÂ ->Â boolean)
function
quotientÂ :Â (integerÂ integerÂ ->Â integer)
function
randomÂ :Â (naturalÂ ->Â natural)
function
rational?Â :Â (anyÂ ->Â boolean)
function
real-partÂ :Â (numberÂ ->Â real)
function
real?Â :Â (anyÂ ->Â boolean)
function
remainderÂ :Â (integerÂ integerÂ ->Â integer)
function
roundÂ :Â (realÂ ->Â integer)
function
sinÂ :Â (numberÂ ->Â number)
function
sqrtÂ :Â (numberÂ ->Â number)
function
string->numberÂ :Â (stringÂ ->Â (mixedÂ numberÂ false))
function
tanÂ :Â (numberÂ ->Â number)
function
zero?Â :Â (numberÂ ->Â boolean)
function
boolean=?Â :Â (booleanÂ booleanÂ ->Â boolean)
function
boolean?Â :Â (anyÂ ->Â boolean)
function
equal?Â :Â (anyÂ anyÂ ->Â boolean)
function
false?Â :Â (anyÂ ->Â boolean)
function
notÂ :Â (booleanÂ ->Â boolean)
function
true?Â :Â (anyÂ ->Â boolean)
function
appendÂ :Â ((list-ofÂ %a)Â ...Â ->Â (list-ofÂ %a))
function
consÂ :Â (%aÂ (list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
cons?Â :Â (anyÂ ->Â boolean)
constant
emptyÂ :Â list
function
empty?Â :Â (anyÂ ->Â boolean)
function
filterÂ :Â ((%aÂ ->Â boolean)Â (list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
firstÂ :Â ((list-ofÂ %a)Â ->Â %a)
function
foldÂ :Â (%bÂ (%aÂ %bÂ ->Â %b)Â (list-ofÂ %a)Â ->Â %b)
function
lengthÂ :Â ((list-ofÂ %a)Â ->Â natural)
function
listÂ :Â (%aÂ ...Â ->Â (list-ofÂ %a))
function
list-refÂ :Â ((list-ofÂ %a)Â naturalÂ ->Â %a)
function
restÂ :Â ((list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
reverseÂ :Â ((list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
string->strings-listÂ :Â (stringÂ ->Â (list-ofÂ string))
function
string-appendÂ :Â (stringÂ stringÂ ...Â ->Â string)
function
string-lengthÂ :Â (stringÂ ->Â natural)
function
string<=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string<?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string?Â :Â (anyÂ ->Â boolean)
function
strings-list->stringÂ :Â ((list-ofÂ string)Â ->Â string)
function
for-eachÂ :Â ((%aÂ ->Â %b)Â (list-ofÂ %a)Â ->Â unspecific)
function
mapÂ :Â ((%aÂ ->Â %b)Â (list-ofÂ %a)Â ->Â (list-ofÂ %b))
function
readÂ :Â (->Â any)
function
signature?Â :Â (anyÂ ->Â boolean)
function
violationÂ :Â (stringÂ ->Â unspecific)
function
write-newlineÂ :Â (->Â unspecific)
function
write-stringÂ :Â (stringÂ ->Â unspecific)
syntax
âquoted
syntax
(quoteÂ quoted)
syntax
symbol
syntax
(matchÂ exprÂ (patternÂ expr)Â ...)
Â 
patternÂ =Â ...
      Â Â |Â âquoted
syntax
(defineÂ idÂ expr)
syntax
(lambdaÂ (idÂ idÂ ...Â . id)Â expr)
syntax
(Î»Â (idÂ idÂ ...Â . id)Â expr)
syntax
(beginÂ exprÂ ...Â expr)
function
*Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
+Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
-Â :Â (numberÂ numberÂ ...Â ->Â number)
function
/Â :Â (numberÂ numberÂ numberÂ ...Â ->Â number)
function
<Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
<=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
=Â :Â (numberÂ numberÂ numberÂ ...Â ->Â boolean)
function
>Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
>=Â :Â (realÂ realÂ realÂ ...Â ->Â boolean)
function
absÂ :Â (realÂ ->Â real)
function
acosÂ :Â (numberÂ ->Â number)
function
angleÂ :Â (numberÂ ->Â real)
function
asinÂ :Â (numberÂ ->Â number)
function
atanÂ :Â (numberÂ ->Â number)
function
ceilingÂ :Â (realÂ ->Â integer)
function
complex?Â :Â (anyÂ ->Â boolean)
function
cosÂ :Â (numberÂ ->Â number)
function
current-secondsÂ :Â (->Â natural)
function
denominatorÂ :Â (rationalÂ ->Â natural)
function
even?Â :Â (integerÂ ->Â boolean)
function
exact->inexactÂ :Â (numberÂ ->Â number)
function
exact?Â :Â (numberÂ ->Â boolean)
function
expÂ :Â (numberÂ ->Â number)
function
exptÂ :Â (numberÂ numberÂ ->Â number)
function
floorÂ :Â (realÂ ->Â integer)
function
gcdÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
imag-partÂ :Â (numberÂ ->Â real)
function
inexact->exactÂ :Â (numberÂ ->Â number)
function
inexact?Â :Â (numberÂ ->Â boolean)
function
integer?Â :Â (anyÂ ->Â boolean)
function
lcmÂ :Â (integerÂ integerÂ ...Â ->Â natural)
function
logÂ :Â (numberÂ ->Â number)
function
magnitudeÂ :Â (numberÂ ->Â real)
function
make-polarÂ :Â (realÂ realÂ ->Â number)
function
maxÂ :Â (realÂ realÂ ...Â ->Â real)
function
minÂ :Â (realÂ realÂ ...Â ->Â real)
function
moduloÂ :Â (integerÂ integerÂ ->Â integer)
function
natural?Â :Â (anyÂ ->Â boolean)
function
negative?Â :Â (numberÂ ->Â boolean)
function
number->stringÂ :Â (numberÂ ->Â string)
function
number?Â :Â (anyÂ ->Â boolean)
function
numeratorÂ :Â (rationalÂ ->Â integer)
function
odd?Â :Â (integerÂ ->Â boolean)
function
positive?Â :Â (numberÂ ->Â boolean)
function
quotientÂ :Â (integerÂ integerÂ ->Â integer)
function
randomÂ :Â (naturalÂ ->Â natural)
function
rational?Â :Â (anyÂ ->Â boolean)
function
real-partÂ :Â (numberÂ ->Â real)
function
real?Â :Â (anyÂ ->Â boolean)
function
remainderÂ :Â (integerÂ integerÂ ->Â integer)
function
roundÂ :Â (realÂ ->Â integer)
function
sinÂ :Â (numberÂ ->Â number)
function
sqrtÂ :Â (numberÂ ->Â number)
function
string->numberÂ :Â (stringÂ ->Â (mixedÂ numberÂ false))
function
tanÂ :Â (numberÂ ->Â number)
function
zero?Â :Â (numberÂ ->Â boolean)
function
boolean=?Â :Â (booleanÂ booleanÂ ->Â boolean)
function
boolean?Â :Â (anyÂ ->Â boolean)
function
equal?Â :Â (anyÂ anyÂ ->Â boolean)
function
false?Â :Â (anyÂ ->Â boolean)
function
notÂ :Â (booleanÂ ->Â boolean)
function
true?Â :Â (anyÂ ->Â boolean)
function
appendÂ :Â ((list-ofÂ %a)Â ...Â ->Â (list-ofÂ %a))
function
consÂ :Â (%aÂ (list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
cons?Â :Â (anyÂ ->Â boolean)
constant
emptyÂ :Â list
function
empty?Â :Â (anyÂ ->Â boolean)
function
filterÂ :Â ((%aÂ ->Â boolean)Â (list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
firstÂ :Â ((list-ofÂ %a)Â ->Â %a)
function
foldÂ :Â (%bÂ (%aÂ %bÂ ->Â %b)Â (list-ofÂ %a)Â ->Â %b)
function
lengthÂ :Â ((list-ofÂ %a)Â ->Â natural)
function
listÂ :Â (%aÂ ...Â ->Â (list-ofÂ %a))
function
list-refÂ :Â ((list-ofÂ %a)Â naturalÂ ->Â %a)
function
restÂ :Â ((list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
reverseÂ :Â ((list-ofÂ %a)Â ->Â (list-ofÂ %a))
function
string->strings-listÂ :Â (stringÂ ->Â (list-ofÂ string))
function
string-appendÂ :Â (stringÂ stringÂ ...Â ->Â string)
function
string-lengthÂ :Â (stringÂ ->Â natural)
function
string<=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string<?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>=?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string>?Â :Â (stringÂ stringÂ stringÂ ...Â ->Â boolean)
function
string?Â :Â (anyÂ ->Â boolean)
function
strings-list->stringÂ :Â ((list-ofÂ string)Â ->Â string)
function
string->symbolÂ :Â (stringÂ ->Â symbol)
function
symbol->stringÂ :Â (symbolÂ ->Â string)
function
symbol=?Â :Â (symbolÂ symbolÂ ->Â boolean)
function
symbol?Â :Â (anyÂ ->Â boolean)
function
applyÂ :Â (functionÂ (list-ofÂ %a)Â ->Â %b)
function
eq?Â :Â (%aÂ %bÂ ->Â boolean)
function
for-eachÂ :Â ((%aÂ ->Â %b)Â (list-ofÂ %a)Â ->Â unspecific)
function
mapÂ :Â ((%aÂ ->Â %b)Â (list-ofÂ %a)Â ->Â (list-ofÂ %b))
function
readÂ :Â (->Â any)
function
signature?Â :Â (anyÂ ->Â boolean)
function
violationÂ :Â (stringÂ ->Â unspecific)
function
write-newlineÂ :Â (->Â unspecific)
function
write-stringÂ :Â (stringÂ ->Â unspecific)
